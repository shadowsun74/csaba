Előzmények és egy kis plusz

vector3 p = transform.position  (localScale), quaternion..rotation
vector3 p2 = transform.localPosition (losyScale) local...

transform.position = center;

--------
[serializefield] gamoboject2 transform...
... gameobject2.transform....
Így lehet hívni

-----------------------
referencia, egyik script odaszól a másiknak
majd tanuljuk
-----------------
mesh filter - oda húzod a mesh-t (serialize)

mesh renderer - fontos (serialize).. - materál határozta meg, milyen legyen a felszíne
--------------

3d mesh, 2d sprite

----------------


új scene, 2 d create empty, sprite rendere, sprite
berakja, de nem látjuk be kell pozícionálni kamera terében legyen benne
perspektív, ortografikus kamera, 45 fokos szög fúgg. vízszint (izometrikus)
vágósik, elüülső, hátulsó vágósík tárből ezt vágjuk ki
-----------------

Sprite

Pixels per unit (a képen magán hány pixel legyen 1 egység  )


sprite sheet - megtekinthető

Kell előtte package Manager -- utána 2d sprite (install)
--------------------

0,3 float - unity -- nem tudja kettes számrendszerben, a float és double vmi nagyon közelit ad vissza
----------------------

Sprite Editor most már elérhető

-------------
Pivit point nem a közepén van, figyelni kell rá.
Sprite minden képnek van egy meta fie is (mindennek van, a hangoknak is). Meta- extra info
Ha másoltok, 
 könyvtárból könyvtárba, akkor a meta file-t is másold. Ha Unity belül csinálod, az viszi

Automatikusan fel lehet darabolni (slice, automatic slice) - revert vgy apply.

Sprite nagyon fontos beálítás, DARW Mode simple, slice, tiled - akkor lehet tiling-et csinálni

Sprite editrnál, hogy ez egy full rack? ha ezt beállíottuk, akkor lehet csermpézni.űű
---------------------------
2d képeknél is van mormal map - fényvisszaverés, tud reagálni fényekre

Sprite renderer vs sprite renderer - sprite-nél egyik sprite vagy előrébb, vagy hétrébb, a másiknál lehet átfedés (3d)
Ha mindkettőt nullába tesszük, akkor nem tudjuk megmondani, melyik lesz elől, málység vátoztatás kell

Sorting LAyer, sorrendet ad.

--------------------------------
Light
using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1, c2;

    void Update()
    {
        
    }
}

------------
Ha itt létrejön és állítom a színeket, alatta van egy csík. ami fehér, az alpha csatornát fel kell húzni,

kódból:

using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;

    void Update()
    {
        
    }
}
---------------------

using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;

    [SerializeField, Range(0,1) ] float dim = 0;
    ]
    void Update()
    {
        light.color= Color.Lerp(c1, c2, dim);
    }
}

-------------------

using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;

    [SerializeField, Range(0,1) ] float dim = 0;

	void OnValidate()                   //ezzel oldjuk meeg, hogy bármilyen változásnál unity-n belül is egyből lássuk a váltoiztatást
    {
        Update();
    }

    void Update()
    {
        light.color= Color.Lerp(c1, c2, dim);
    }
}
-------------

 using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;

    [SerializeField, Range(0, 1)] float dim = 0;

    void OnValidate()   //ezzel oldjuk meg, hogy unity-n belül is gyből mutassa
    {
        Update();
    }

    void Update()
    {
        light.color = Color.Lerp(c1, c2, dim);
    }
}


------------------------------------

Simítva menjen a szín oda-vissza
színus függvényű

using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;


    void OnValidate()   //ezzel oldjuk meg, hogy unity-n belül is gyből mutassa
    {
        Update();
    }

    void Update()
    {
        float t = Time.time;    // lekérdezzük mennyi idő múlt el a játék kezdete óta
        float sin = Mathf.Sin(t);
        light.color = Color.Lerp(c1, c2, sin); // lerp az mindíg 0 és 1 közötti érték. Mivel a színus 1 és -1 között mászkál ezt át kell konvertálnunk
    }
}

---------------------------------------


using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;


    void OnValidate()   //ezzel oldjuk meg, hogy unity-n belül is gyből mutassa
    {
        Update();
    }

    void Update()
    {
        float t = Time.time;    // lekérdezzük mennyi idő múlt el a játék kezdete óta
        float sin = Mathf.Sin(t);
        light.color = Color.Lerp(c1, c2, sin); // lerp az mindíg 0 és 1 közötti érték. Mivel a színus 1 és -1 között mászkál ezt át kell konvertálnunk +1 hogy ne legyen negatív, majd oszt 2-vel
        sin += 1;
        sin = sin / 2;
    }
}

-----------------

legyen sebessége is.



using UnityEngine;

class LightDimmer : MonoBehaviour
{
    [SerializeField] Light light;
    [SerializeField] Color c1 = Color.white;
    [SerializeField] Color c2 = Color.white;
    [SerializeField] float frequency = 1;


    void OnValidate()   //ezzel oldjuk meg, hogy unity-n belül is gyből mutassa
    {
        Update();
    }

    void Update()
    {
        float t = Time.time;    // lekérdezzük mennyi idő múlt el a játék kezdete óta
        t *= frequency;
        t *= Mathf.PI * 2 // azzal kell szorozni, ami a teljes szélesség, 2pi raián, mert fokkban kell

        float sin = Mathf.Sin(t);
        sin += 1;
        sin /= 2;

        light.color = Color.Lerp(c1, c2, sin); // lerp az mindíg 0 és 1 közötti érték. Mivel a színus 1 és -1 között mászkál ezt át kell konvertálnunk +1 hogy ne legyen negatív, majd oszt 2-vel

    }
}

-----------------

collidereket levesszük az enemy-ről, gyerek objectnél, játékosról is, 
visszatesszük ahova kell
ha nem collider, hanem csak összeér, az trigger (IS Trigger bekapcsolása)
mindhárman beállítottuk IsTrigger-rel

-

using UnityEngine;

class Damager : MonoBehaviour
{
    
}


// ----------------------------------------------


using UnityEngine;

class HealthObject : MonoBehaviour
{

}

---------------

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    int currentHealth;
}
-----------------------------------

using UnityEngine;

class Damager : MonoBehaviour
{
    [SerializeField] int damage = 10;

    void OnTriggerEnter(Collider other)  // ez új, és van paramétee (először ilyen) OnTrigger....2d = 2d játékban !
    {
        
    }

}

amikor a 2 collider találkozik, ellenőrzi a scipteket.
Az on triggerenter - most érkeztek, exit - kilépett, stay - ciklikusan fog hívódni, jön az üzi hgy benne van

----------------------------

using UnityEngine;

class Damager : MonoBehaviour
{
    [SerializeField] int damage = 10;

    void OnTriggerEnter(Collider other)  // ez új, és van paramétee (először ilyen) OnTrigger....2d = 2d játékban !
    {
        GameObject go = other.gameObject; // bármilyen komponenstípustól elkérjük a game objectjét (other). Semmi akadálya, hogy láthatatlan fal legyen, vagy átsétálni valamin. 
        Debug.Log(go.name);
    }

}


----------------------------

Enemy, obstacle damagert rá, magunkra meg a healt.ot tesszük fel.


Ha a kódban legjobb oldalon adunk kódba cehckpointot és utána attach to unity, akkor ott megáll, unityben mutatja
ilyenkor a script leragadthat, Unity meg sem nyílik meret nem ott tart.

Ha menetközben átkattintok pl Projekt Asset-ekről, Consolee-re, és nem kattintok a scene-be, akkor play után pl. a karakterem nem megy. Bele kel kattintani.

Legalább egy elemre tegyük rá a rigidbody-t, innen tudja, hogy van valami, és azt mondjuk, hogy IS kinematic, ami azt jelenti, hogy 

-------------------------------------

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
    }

    public void Damage(int.damage)    // ha nem írjuk ki a private-t, akkor az a default, a public jelenti, hogy máshonnan is elérhető.
    {
        currentHealth -= damage;

        if 
        Debug.Log("Auch");
    }
}

-

using UnityEngine;

class Damager : MonoBehaviour
{
    [SerializeField] int damage = 10;

    void OnTriggerEnter(Collider other)  // ez új, és van paramétee (először ilyen) OnTrigger....2d = 2d játékban !
    {
        GameObject go = other.gameObject; // bármilyen komponenstípustól elkérjük a game objectjét (other). Semmi akadálya, hogy láthatatlan fal legyen, vagy átsétálni valamin. 

        HealthObject ho = go.GetComponent<HealthObject>(); // itt a kacsacsőr zárójel, spéci, mezei metódus. nincs paramétere, csak paraméterszerűsége,
                                                           // nem leeht bármhol, csak aki kezeli, ez a kacsacsőrben az osztélynév- Ez generikus függvény (olvass utána ha akarsz)
        if(ho != null)                                      // null egy érték
        {
            ho.damage(damage);          // ha itt rányomo az F12.re, akkr innen oda ugrik másik kódra, ahol hazsnálom
        }
    }



}



----------------

Health:

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
    }

    public void Damage(int damage)
    {
        currentHealth -= damage;

        if (currentHealth <= 0)
        {
            Debug.Log("Good By!");
        }
        // Debug.Log("Aucs!");
    }
}

--------------

Damager:

using UnityEngine;

class Damager : MonoBehaviour
{
    [SerializeField] int damage = 10;

    void OnTriggerEnter(Collider other)
    {
        GameObject go = other.gameObject;
        // Debug.Log(go.name);

        HealthObject ho = go.GetComponent<HealthObject>();

        if (ho != null)
        {
            ho.Damage(damage);
        }
    }
}

--------------------------------
Életünknek nem lenne szabad nulla alá mennie, és egyszer írja ki, hogy good bye.

Debug mód a Player, legjobbaoldalt a ... alatt van, akkor látom, hogy számlálja a csökkenést.

---

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth == 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz

        currentHealth = Mathf.Max(currentHealth, 0); // ezzzel egy sorba bele tudjuk tenni if helyett

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        }
        // Debug.Log("Aucs!");
    }
}

-----------------

Cak akkor mozoghatunk, ha van bármi élete


-----------------
-



--------------------

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    public int currentHealth; // ez itt az új

    void Start()
    {
        currentHealth = maxHealth;
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth == 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz

        currentHealth = Mathf.Max(currentHealth, 0); // ezzzel egy sorba bele tudjuk tenni if helyett

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        }
        // Debug.Log("Aucs!");
    }
}

-------------------------------------



using UnityEngine;
using UnityEngine.Tilemaps;

public class Mover : MonoBehaviour
{
    // [SerializeField] Vector3 velocity; //kikommenteztük mert nem beállításból jön
    [SerializeField] float speed = 5; // ami szerializált field-ek, azok megjelennek az editorban
    [SerializeField] Transform cameraTransform;
    [SerializeField] bool moveInCameraSpace = true;
    [SerializeField] float angularVelocity = 100;
    [SerializeField] HealthObject =  healthObject;

        private void OnValidate()
    {
        if (healthObject == null)
        HealthObject healthObject = GetComponent<healthObject>();
    }

    void Update()
    {
        if (healthObject.currentHealth <= 0) return;
       

        bool up = Input.GetKey(KeyCode.UpArrow); // ez éppen le van nyomva (GetKeyDown), de itt folyamatosat jelent; || Input.GeKey(KeyCode-W); kiegészíthető
        bool down = Input.GetKey(KeyCode.DownArrow);
        bool right = Input.GetKey(KeyCode.RightArrow);
        bool left = Input.GetKey(KeyCode.LeftArrow);
        // hogyan csinálunk vektorból egységnyit itt?

        float z = 0;
    
        if (up && down)
            z = 0;
        else if (up)
            z = 1; // pozitív az up
        else if (down)
            z = -1;


        float x = 0;
       
        if (right && left)
            z = 0;
        else if (left)
            x -= 1;
        else if (right) 
            x += 1; // right a pozitív, left negatív

        // de átlóban sokkal gyorsabb, nem egy, ezért normalizálni kell

        //  Vector3 rightDir = Vector3.right;
        // Vector3 forwardDir = Vector3.forward;

        Vector3 rightDir = moveInCameraSpace ? cameraTransform.right : Vector3.right;
        Vector3 forwardDir = moveInCameraSpace ? cameraTransform.forward : Vector3.forward;

        // Vector3.velocity = new (x, 0, z);
        // Vector3 velocity = rightDir * x + forwardDir * z;
        Vector3 velocity = rightDir * x + forwardDir * z;
        velocity.y = 0;

        // azért csináltuk komplikáltabb módon mert ez az általános megoldás, előállítja a mi irány vektorunkat
        // Ha kikapcsoljuk a akamera döntését, az kell

        velocity.Normalize(); // a speed előtt, hogy azt ne normalizálja

        velocity *= speed;

       

        Vector3 p = transform.position;

        Vector3 newPos = p + (velocity * Time.deltaTime);
        transform.position = newPos;


        // if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
          //  transform.rotation = Quaternion.LookRotation(velocity); // arra nézzen az előre, amerre mész. Ezért kellett az orrot  kék nyil irányában létrehozni.

        if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
        {
            Quaternion targetRotation = Quaternion.LookRotation(velocity);
            Quaternion currentRotation = transform.rotation;
            transform.rotation = Quaternion.RotateTowards(currentRotation, targetRotation, angularVelocity * Time.deltaTime);
        }
            
            

        

    }
    //ha ezek után beírjuk, hogy y = 0.01, és run, elkezd felfelé menni


    /*
      
     [SerializeField] Vector3 pos; // ez meg is jelenik a Unity-ben

     void Start()
    {
        Vector2 v2a = new Vector2(1, 4); // new kulcsszó ha bármit létre akarunk hozni 
        Vector3 v3a = new Vector3(4, 5, 7.54f); // am,i idáig volt, az primitív típus volt, ez összetett típus

        float f1 = v2a.x; // pont operátorral nyerjük ki az egyik elemet.
        float f2 = v3a.z;

        // tudjuk, h. transformja mindnek van.

        Transform t = transform; // új típus. Mindíg nagybetű, ha nem primitív típus
        t.position = v3a;

        void Update() // minden egyes képfrissítésre hívja meg
        {
            transform.position = new Vector3(1,2,3);
        }
    }
    */
}


-------------------------------------------

Damager meg (3ik)

using UnityEngine;

class Damager : MonoBehaviour
{
    [SerializeField] int damage = 10;
    int currentHealth;

    void OnTriggerEnter(Collider other)
    {
        GameObject go = other.gameObject;
        // Debug.Log(go.name);

        HealthObject ho = go.GetComponent<HealthObject>();

        if (ho != null)
        {
            ho.Damage(damage);
        }
    }
}

--------------------------

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    public int currentHealth; // ez itt az új

    void Start()
    {
        currentHealth = maxHealth;
    }

    bool IsAlive()
    { 
        return currentHealth > 0; 
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth == 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz

        currentHealth = Mathf.Max(currentHealth, 0); // ezzzel egy sorba bele tudjuk tenni if helyett

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        }
        // Debug.Log("Aucs!");
    }
}

----------------------------


using UnityEngine;
using UnityEngine.Tilemaps;

public class Mover : MonoBehaviour
{
    // [SerializeField] Vector3 velocity; //kikommenteztük mert nem beállításból jön
    [SerializeField] float speed = 5; // ami szerializált field-ek, azok megjelennek az editorban
    [SerializeField] Transform cameraTransform;
    [SerializeField] bool moveInCameraSpace = true;
    [SerializeField] float angularVelocity = 100;
    [SerializeField] HealthObject =  healthObject;

        private void OnValidate()
    {
        if (healthObject == null)
        HealthObject healthObject = GetComponent<healthObject>();
    }

    void Update()
    {
        //  if (healthObject.currentHealth <= 0) return;
        if (healthObject.IsAlive()) return;


        bool up = Input.GetKey(KeyCode.UpArrow); // ez éppen le van nyomva (GetKeyDown), de itt folyamatosat jelent; || Input.GeKey(KeyCode-W); kiegészíthető
        bool down = Input.GetKey(KeyCode.DownArrow);
        bool right = Input.GetKey(KeyCode.RightArrow);
        bool left = Input.GetKey(KeyCode.LeftArrow);
        // hogyan csinálunk vektorból egységnyit itt?

        float z = 0;
    
        if (up && down)
            z = 0;
        else if (up)
            z = 1; // pozitív az up
        else if (down)
            z = -1;


        float x = 0;
       
        if (right && left)
            z = 0;
        else if (left)
            x -= 1;
        else if (right) 
            x += 1; // right a pozitív, left negatív

        // de átlóban sokkal gyorsabb, nem egy, ezért normalizálni kell

        //  Vector3 rightDir = Vector3.right;
        // Vector3 forwardDir = Vector3.forward;

        Vector3 rightDir = moveInCameraSpace ? cameraTransform.right : Vector3.right;
        Vector3 forwardDir = moveInCameraSpace ? cameraTransform.forward : Vector3.forward;

        // Vector3.velocity = new (x, 0, z);
        // Vector3 velocity = rightDir * x + forwardDir * z;
        Vector3 velocity = rightDir * x + forwardDir * z;
        velocity.y = 0;

        // azért csináltuk komplikáltabb módon mert ez az általános megoldás, előállítja a mi irány vektorunkat
        // Ha kikapcsoljuk a akamera döntését, az kell

        velocity.Normalize(); // a speed előtt, hogy azt ne normalizálja

        velocity *= speed;

       

        Vector3 p = transform.position;

        Vector3 newPos = p + (velocity * Time.deltaTime);
        transform.position = newPos;


        // if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
          //  transform.rotation = Quaternion.LookRotation(velocity); // arra nézzen az előre, amerre mész. Ezért kellett az orrot  kék nyil irányában létrehozni.

        if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
        {
            Quaternion targetRotation = Quaternion.LookRotation(velocity);
            Quaternion currentRotation = transform.rotation;
            transform.rotation = Quaternion.RotateTowards(currentRotation, targetRotation, angularVelocity * Time.deltaTime);
        }
            
            

        

    }
    //ha ezek után beírjuk, hogy y = 0.01, és run, elkezd felfelé menni


    /*
      
     [SerializeField] Vector3 pos; // ez meg is jelenik a Unity-ben

     void Start()
    {
        Vector2 v2a = new Vector2(1, 4); // new kulcsszó ha bármit létre akarunk hozni 
        Vector3 v3a = new Vector3(4, 5, 7.54f); // am,i idáig volt, az primitív típus volt, ez összetett típus

        float f1 = v2a.x; // pont operátorral nyerjük ki az egyik elemet.
        float f2 = v3a.z;

        // tudjuk, h. transformja mindnek van.

        Transform t = transform; // új típus. Mindíg nagybetű, ha nem primitív típus
        t.position = v3a;

        void Update() // minden egyes képfrissítésre hívja meg
        {
            transform.position = new Vector3(1,2,3);
        }
    }
    */
}

-------------------------------
elvileg itt már nem mozog ha elfogy az élet.
----------------------


ha be van állítva helth object, akkor is alive, egyébként mindíg mozgunk:ű
----------



using UnityEngine;
using UnityEngine.Tilemaps;

public class Mover : MonoBehaviour
{
    // [SerializeField] Vector3 velocity; //kikommenteztük mert nem beállításból jön
    [SerializeField] float speed = 5; // ami szerializált field-ek, azok megjelennek az editorban
    [SerializeField] Transform cameraTransform;
    [SerializeField] bool moveInCameraSpace = true;
    [SerializeField] float angularVelocity = 100;
    [SerializeField] HealthObject =  healthObject;

        private void OnValidate()
    {
        if (healthObject == null)
        HealthObject healthObject = GetComponent<healthObject>();
    }

    void Update()
    {
        //  if (healthObject.currentHealth <= 0) return;

        if healthObject != null)
        {
            if (healthObject.IsAlive())
                return;
        }

       //  if (HealthObject != null && !healthObject.IsAlive())                  // a fenti pontosan ugyanez
       //     return;

        bool up = Input.GetKey(KeyCode.UpArrow); // ez éppen le van nyomva (GetKeyDown), de itt folyamatosat jelent; || Input.GeKey(KeyCode-W); kiegészíthető
        bool down = Input.GetKey(KeyCode.DownArrow);
        bool right = Input.GetKey(KeyCode.RightArrow);
        bool left = Input.GetKey(KeyCode.LeftArrow);
        // hogyan csinálunk vektorból egységnyit itt?

        float z = 0;
    
        if (up && down)
            z = 0;
        else if (up)
            z = 1; // pozitív az up
        else if (down)
            z = -1;


        float x = 0;
       
        if (right && left)
            z = 0;
        else if (left)
            x -= 1;
        else if (right) 
            x += 1; // right a pozitív, left negatív

        // de átlóban sokkal gyorsabb, nem egy, ezért normalizálni kell

        //  Vector3 rightDir = Vector3.right;
        // Vector3 forwardDir = Vector3.forward;

        Vector3 rightDir = moveInCameraSpace ? cameraTransform.right : Vector3.right;
        Vector3 forwardDir = moveInCameraSpace ? cameraTransform.forward : Vector3.forward;

        // Vector3.velocity = new (x, 0, z);
        // Vector3 velocity = rightDir * x + forwardDir * z;
        Vector3 velocity = rightDir * x + forwardDir * z;
        velocity.y = 0;

        // azért csináltuk komplikáltabb módon mert ez az általános megoldás, előállítja a mi irány vektorunkat
        // Ha kikapcsoljuk a akamera döntését, az kell

        velocity.Normalize(); // a speed előtt, hogy azt ne normalizálja

        velocity *= speed;

       

        Vector3 p = transform.position;

        Vector3 newPos = p + (velocity * Time.deltaTime);
        transform.position = newPos;


        // if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
          //  transform.rotation = Quaternion.LookRotation(velocity); // arra nézzen az előre, amerre mész. Ezért kellett az orrot  kék nyil irányában létrehozni.

        if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
        {
            Quaternion targetRotation = Quaternion.LookRotation(velocity);
            Quaternion currentRotation = transform.rotation;
            transform.rotation = Quaternion.RotateTowards(currentRotation, targetRotation, angularVelocity * Time.deltaTime);
        }
            
            

        

    }
    //ha ezek után beírjuk, hogy y = 0.01, és run, elkezd felfelé menni


    /*
      
     [SerializeField] Vector3 pos; // ez meg is jelenik a Unity-ben

     void Start()
    {
        Vector2 v2a = new Vector2(1, 4); // new kulcsszó ha bármit létre akarunk hozni 
        Vector3 v3a = new Vector3(4, 5, 7.54f); // am,i idáig volt, az primitív típus volt, ez összetett típus

        float f1 = v2a.x; // pont operátorral nyerjük ki az egyik elemet.
        float f2 = v3a.z;

        // tudjuk, h. transformja mindnek van.

        Transform t = transform; // új típus. Mindíg nagybetű, ha nem primitív típus
        t.position = v3a;

        void Update() // minden egyes képfrissítésre hívja meg
        {
            transform.position = new Vector3(1,2,3);
        }
    }
    */
}


---------------------------------

HELATH OBJECT HIBA VOLT JAVÍTVA ITT

using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;

    public int currentHealth; // ez itt az új

    void Start()
    {
        currentHealth = maxHealth;
    }

   public bool IsAlive()
    { 
        return currentHealth > 0; 
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth == 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz

        currentHealth = Mathf.Max(currentHealth, 0); // ezzzel egy sorba bele tudjuk tenni if helyett

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        
        // Debug.Log("Aucs!");
    }
}


-----------------------------------

MOVER IS JAVÍTVA


using UnityEngine;
using UnityEngine.Tilemaps;

public class Mover : MonoBehaviour
{
    // [SerializeField] Vector3 velocity; //kikommenteztük mert nem beállításból jön
    [SerializeField] float speed = 5; // ami szerializált field-ek, azok megjelennek az editorban
    [SerializeField] Transform cameraTransform;
    [SerializeField] bool moveInCameraSpace = true;
    [SerializeField] float angularVelocity = 100;
    [SerializeField] HealthObject healthObject;

        private void OnValidate()
    {
        if (healthObject == null)
        healthObject = GetComponent<HealthObject>();
    }

    void Update()
    {
        //  if (healthObject.currentHealth <= 0) return;

        if (healthObject != null)
        {
            if (healthObject.IsAlive())
                return;
        }

       //  if (HealthObject != null && !healthObject.IsAlive())                  // a fenti pontosan ugyanez
       //     return;

        bool up = Input.GetKey(KeyCode.UpArrow); // ez éppen le van nyomva (GetKeyDown), de itt folyamatosat jelent; || Input.GeKey(KeyCode-W); kiegészíthető
        bool down = Input.GetKey(KeyCode.DownArrow);
        bool right = Input.GetKey(KeyCode.RightArrow);
        bool left = Input.GetKey(KeyCode.LeftArrow);
        // hogyan csinálunk vektorból egységnyit itt?

        float z = 0;
    
        if (up && down)
            z = 0;
        else if (up)
            z = 1; // pozitív az up
        else if (down)
            z = -1;


        float x = 0;
       
        if (right && left)
            z = 0;
        else if (left)
            x -= 1;
        else if (right) 
            x += 1; // right a pozitív, left negatív

        // de átlóban sokkal gyorsabb, nem egy, ezért normalizálni kell

        //  Vector3 rightDir = Vector3.right;
        // Vector3 forwardDir = Vector3.forward;

        Vector3 rightDir = moveInCameraSpace ? cameraTransform.right : Vector3.right;
        Vector3 forwardDir = moveInCameraSpace ? cameraTransform.forward : Vector3.forward;

        // Vector3.velocity = new (x, 0, z);
        // Vector3 velocity = rightDir * x + forwardDir * z;
        Vector3 velocity = rightDir * x + forwardDir * z;
        velocity.y = 0;

        // azért csináltuk komplikáltabb módon mert ez az általános megoldás, előállítja a mi irány vektorunkat
        // Ha kikapcsoljuk a akamera döntését, az kell

        velocity.Normalize(); // a speed előtt, hogy azt ne normalizálja

        velocity *= speed;

       

        Vector3 p = transform.position;

        Vector3 newPos = p + (velocity * Time.deltaTime);
        transform.position = newPos;


        // if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
          //  transform.rotation = Quaternion.LookRotation(velocity); // arra nézzen az előre, amerre mész. Ezért kellett az orrot  kék nyil irányában létrehozni.

        if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
        {
            Quaternion targetRotation = Quaternion.LookRotation(velocity);
            Quaternion currentRotation = transform.rotation;
            transform.rotation = Quaternion.RotateTowards(currentRotation, targetRotation, angularVelocity * Time.deltaTime);
        }
            
            

        

    }
    //ha ezek után beírjuk, hogy y = 0.01, és run, elkezd felfelé menni


    /*
      
     [SerializeField] Vector3 pos; // ez meg is jelenik a Unity-ben

     void Start()
    {
        Vector2 v2a = new Vector2(1, 4); // new kulcsszó ha bármit létre akarunk hozni 
        Vector3 v3a = new Vector3(4, 5, 7.54f); // am,i idáig volt, az primitív típus volt, ez összetett típus

        float f1 = v2a.x; // pont operátorral nyerjük ki az egyik elemet.
        float f2 = v3a.z;

        // tudjuk, h. transformja mindnek van.

        Transform t = transform; // új típus. Mindíg nagybetű, ha nem primitív típus
        t.position = v3a;

        void Update() // minden egyes képfrissítésre hívja meg
        {
            transform.position = new Vector3(1,2,3);
        }
    }
    */
}
------------------------------------

Volt egy hiba a helathobject.isalive helyett neggálni kellett azért nem mozgott


using UnityEngine;
using UnityEngine.Tilemaps;

public class Mover : MonoBehaviour
{
    // [SerializeField] Vector3 velocity; //kikommenteztük mert nem beállításból jön
    [SerializeField] float speed = 5; // ami szerializált field-ek, azok megjelennek az editorban
    [SerializeField] Transform cameraTransform;
    [SerializeField] bool moveInCameraSpace = true;
    [SerializeField] float angularVelocity = 100;
    [SerializeField] HealthObject healthObject;

        private void OnValidate()
    {
        if (healthObject == null)
        healthObject = GetComponent<HealthObject>();
    }

    void Update()
    {
        //  if (healthObject.currentHealth <= 0) return;

        if (healthObject != null)
        {
            if (!healthObject.IsAlive()) // negálás
                return;
        }

       //  if (HealthObject != null && !healthObject.IsAlive())                  // a fenti pontosan ugyanez
       //     return;

        bool up = Input.GetKey(KeyCode.UpArrow); // ez éppen le van nyomva (GetKeyDown), de itt folyamatosat jelent; || Input.GeKey(KeyCode-W); kiegészíthető
        bool down = Input.GetKey(KeyCode.DownArrow);
        bool right = Input.GetKey(KeyCode.RightArrow);
        bool left = Input.GetKey(KeyCode.LeftArrow);
        // hogyan csinálunk vektorból egységnyit itt?

        float z = 0;
    
        if (up && down)
            z = 0;
        else if (up)
            z = 1; // pozitív az up
        else if (down)
            z = -1;


        float x = 0;
       
        if (right && left)
            z = 0;
        else if (left)
            x -= 1;
        else if (right) 
            x += 1; // right a pozitív, left negatív

        // de átlóban sokkal gyorsabb, nem egy, ezért normalizálni kell

        //  Vector3 rightDir = Vector3.right;
        // Vector3 forwardDir = Vector3.forward;

        Vector3 rightDir = moveInCameraSpace ? cameraTransform.right : Vector3.right;
        Vector3 forwardDir = moveInCameraSpace ? cameraTransform.forward : Vector3.forward;

        // Vector3.velocity = new (x, 0, z);
        // Vector3 velocity = rightDir * x + forwardDir * z;
        Vector3 velocity = rightDir * x + forwardDir * z;
        velocity.y = 0;

        // azért csináltuk komplikáltabb módon mert ez az általános megoldás, előállítja a mi irány vektorunkat
        // Ha kikapcsoljuk a akamera döntését, az kell

        velocity.Normalize(); // a speed előtt, hogy azt ne normalizálja

        velocity *= speed;

       

        Vector3 p = transform.position;

        Vector3 newPos = p + (velocity * Time.deltaTime);
        transform.position = newPos;


        // if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
          //  transform.rotation = Quaternion.LookRotation(velocity); // arra nézzen az előre, amerre mész. Ezért kellett az orrot  kék nyil irányában létrehozni.

        if (velocity != Vector3.zero) // ugyanaz, mintha a velocity vektor nem egyezik meg a 0, 0, 0 vektorral. If nélkül mindíg visszafordul.
        {
            Quaternion targetRotation = Quaternion.LookRotation(velocity);
            Quaternion currentRotation = transform.rotation;
            transform.rotation = Quaternion.RotateTowards(currentRotation, targetRotation, angularVelocity * Time.deltaTime);
        }
            
            

        

    }
    //ha ezek után beírjuk, hogy y = 0.01, és run, elkezd felfelé menni


    /*
      
     [SerializeField] Vector3 pos; // ez meg is jelenik a Unity-ben

     void Start()
    {
        Vector2 v2a = new Vector2(1, 4); // new kulcsszó ha bármit létre akarunk hozni 
        Vector3 v3a = new Vector3(4, 5, 7.54f); // am,i idáig volt, az primitív típus volt, ez összetett típus

        float f1 = v2a.x; // pont operátorral nyerjük ki az egyik elemet.
        float f2 = v3a.z;

        // tudjuk, h. transformja mindnek van.

        Transform t = transform; // új típus. Mindíg nagybetű, ha nem primitív típus
        t.position = v3a;

        void Update() // minden egyes képfrissítésre hívja meg
        {
            transform.position = new Vector3(1,2,3);
        }
    }
    */
}

------------------------------

Coin felvétel
Nem a playerben oldunk meg mindent, a játékok nem moduláris, csak arra az egy dologra valók

CTRL, SHIFT S minden fájlt ment


-----------------
Minden game componensnek 1 tag, de sok minden más, TAG-eket felejtsük el

using UnityEngine;

public class Collector : MonoBehaviour
{
    [SerializeField] int collected = 0;
   // int currentHealth;

    void OnTriggerEnter(Collider other)
    {
        Collectable c = other.GetComponent<Collectable>();
        collected++;
    }


}

---------------------


using UnityEngine;

public class Collectable : MonoBehaviour
{

    [SerializeField] int value = 1;
}
----------------------
NEXT


using UnityEngine;

public class Collectable : MonoBehaviour
{

    [SerializeField] int value = 1;

    public int GetValue() {  return value; }     // int GetValue() =>  return value;    ilet is szoktak, ami egyszerüen egy érték esetén azt adja vissza                
}

-----------
using UnityEngine;

public class Collector : MonoBehaviour
{
    [SerializeField] int collected = 0;
   // int currentHealth;

    void OnTriggerEnter(Collider other)
    {
        Collectable c = other.GetComponent<Collectable>();

        if (c != null)
            collected += c.GetValue();
        Debug.Log(collected);
    }


}

-------------

enyim


using UnityEngine;

public class Collectable : MonoBehaviour
{

    [SerializeField] int value = 1;
    [SerializeField] Bounds teleportArea;

    public int GetValue() {  return value; }     // int GetValue() =>  return value;    ilet is szoktak, ami egyszerüen egy érték esetén azt adja vissza
                                                 // 
    public void Teleport()
    {
        // ..Size és Extent (szélméret) lesz majd a programon belül
        float x = Random.Range(teleportArea.min.x, teleportArea.max.x);                // ha a Using Sysem is fent megvan a Using Unity mellett, hiba, mert mindkettőben van random.
        float y = Random.Range(teleportArea.min.y, teleportArea.max.y);
        float z = Random.Range(teleportArea.min.z, teleportArea.max.z);

        transform.position = new Vector3(x, y, z);
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireCube(teleportArea.center, teleportArea.size);
    }

}
---------

tanáré

using UnityEngine;

class Collectable : MonoBehaviour
{
    [SerializeField] int value = 1;
    [SerializeField] Bounds teleportArea;

    public int GetValue() => value;

    public void Teleport()
    {
        float x = Random.Range(teleportArea.min.x, teleportArea.max.x);
        float y = Random.Range(teleportArea.min.y, teleportArea.max.y);
        float z = Random.Range(teleportArea.min.z, teleportArea.max.z);

        transform.position = new Vector3(x, y, z);
    }

    void OnDrawGizmos()
    {
        Gizmos.color = Color.green;
        Gizmos.DrawWireCube(teleportArea.center, teleportArea.size);
        
    }
}
---------------------






