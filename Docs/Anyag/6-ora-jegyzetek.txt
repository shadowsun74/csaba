ÓRAIKÓD

using UnityEngine;

class MainDirectionDrawer : MonoBehaviour
{
    [SerializeField] float length = 1;
    [SerializeField] Vector3 direction = new Vector3(1, 1, 1);

    void OnDrawGizmos()
    {
        Vector3 p = transform.position;
        Vector3 right = transform.right * length;
        Vector3 up = transform.up * length;
        Vector3 forward = transform.forward * length;

        Vector3 globalV = transform.TransformDirection(direction);
        globalV.Normalize();
        globalV *= length;

        float r = 0.1f * length;

        Gizmos.color = Color.red;
        Gizmos.DrawLine(p + right, p - right);
        Gizmos.DrawSphere(p + right, r);

        Gizmos.color = Color.green;
        Gizmos.DrawLine(p + up, p - up);
        Gizmos.DrawSphere(p + up, r);

        Gizmos.color = Color.blue;
        Gizmos.DrawLine(p + forward, p - forward);
        Gizmos.DrawSphere(p + forward, r);

        Gizmos.color = Color.yellow;
        Gizmos.DrawLine(p + globalV, p - globalV);
        Gizmos.DrawSphere(p + globalV, r);

    }

}
----------------------------------
SZÍNÁTMENET SULI

Amikor a részeket kell számolnunk, interpolálnunk kell (LERP - lineáris interpoláció)


float segment = 1f / segmentCount; // a 10 részből álló 0-1ig terjedő skálát osztom, ami 0,1ék
// utána csak a szegmentet kell szoroznunk ahanyadik pontnál vagyunk (segment * (i +1 )) azért plusz 1
mert nulla az első szegmens "azonosítója"

using UnityEngine;

class GradientDrawer : MonoBehaviour
{
    [SerializeField] Vector3 p1 = Vector3.left, p2 = Vector3.right;
    [SerializeField] Color c1 = Color.red, c2 = Color.blue;

    [SerializeField, Min(2)] int segmentCount = 10;

    void OnDrawGizmos()
    {
        float segment = 1f / segmentCount;

        for (int i = 0; i < segmentCount; i++)
        {

            float tA = segment * i;
            float tB = segment * (i + 1);

            Vector3 a = Vector3.Lerp(p1, p2, tA);
            Vector3 b = Vector3.Lerp(p1, p2, tB);

            float tC = (float)i / (segmentCount - 1);
            Color c = Color.Lerp(c1, c2, tC);

            Gizmos.color = c;
            Gizmos.DrawLine(a, b);
        }
    }

}

------------------------------------

EGYENESEN MEGY A REPZI (CSAK) ÉS FORDUL HOZZÁ

az "angularspeed a háziban az angularvelocity a suli példában


using UnityEngine;

public class Rocket : MonoBehaviour
{
	[SerializeField] Transform target;
	[SerializeField] float speed = 5;
	[SerializeField] float angularSpeed = 180;
	
	void Update()
	{
		if (target == null)
		return;

		Vector3 direction = target.position - transform.position;
		Quaternion.targetRotation = Quaternion.LookRotation(direction);
		float angle = angularVelocity * Time.deltaTime;
		transform.rotation =  Quaternion.rotateTowards(transform.rotation, targetRotation, angle);

		transform.position += transform.forward * speed * Time.deltaTime;

	}
}

-------
a fentit gépeltem, a másolt alul:

using UnityEngine;

class Rocket : MonoBehaviour
{
    [SerializeField] Transform target;
    [SerializeField] float speed = 1;
    [SerializeField] float angularVelocity = 360;


    void Update()
    {
        if (target == null)
            return;

        Vector3 direction = target.position - transform.position;
        Quaternion targetRotation = Quaternion.LookRotation(direction);    
        float angle = angularVelocity * Time.deltaTime;
        transform.rotation = Quaternion.RotateTowards(transform.rotation, targetRotation, angle);

        transform.position += transform.forward * speed * Time.deltaTime;
        
    }
}

------------------------------ HÁZI VÉGE
-----------------------------------------------------------
ÓRAI ANYAG
-----------------------------------------------------------
OnTriggerEnter - isTrigger - RigidBody - ha nincs beállítva az isTrigger, akkor ütközni fog
other-rel ütköztünk, GetComponenttel kérdeztük le, és ha volt ott sebezhető, akkor OK
DAMAGER kód változtatást javítottam.

a THIS.GETCOMPONENT helyett lehet csak GETCOMPONENT, kivéve ha át akarjuk adni paraméterként, paramétert, akkor kell.

-----------------------
Egyéb GetComponent elemek (a Damager-ben kikommentezve benne van.

 //       Rigidbody rb = other.GetComponentInChildren<Rigidbody>(); //saját magán nézné, utána alatta, de ha megtalált már egyet is, akkor azzal tér vissza
 //       Rigidbody rb = other.GetComponentInParent<Rigidbody>();

 //       Rigidbody[] rigidbodies = GetComponents<Rigidbody>();       // szépen sorban veszi a tömbökből
 //       Rigidbody[] rigidbodies = GetComponentsInChildren<Rigidbody>();
 //       Rigidbody[] rigidbodies = GetComponentsInParent<Rigidbody>();

--------------------------
UI
---

Create - UI - Canvas létrehoz event systemet, ez csak 1x kell, hogy benn legyen, nem fogllkozunk vele sak Canvas-t

UI - Button - TextMeshPro - telepít. kirakja valahova, de a képernyőre teszi ki gyakorlatilag.

Ha az inspektorban kivesszük a pipát a név elől, olyan, mintha nem is lenne benne a játékban.

Button transform itt "rect" transform, 2d-s téglalapot kezel, többet tud mint a transform.
NE MARADJ DBUG-MÓDBAN

Lockolod bal felül, akkor akárhogy módosul, a gomb marad.
Pivot
Van 9 állapot, ne változzon hozzá képest
kék nyilak - tudod te álítani
-----------------

Restart button
alulra betettük középre fixen, 

-----------------

using TMPro;
using UnityEngine;

class Collector : MonoBehaviour
{
    [SerializeField] TMP_Text uiText;

    int collected = 0;

    void OnTriggerEnter(Collider other)
    {
        Collectable c = other.GetComponent<Collectable>();

        if (c != null)
        {
            collected += c.GetValue();
            Debug.Log(collected);

            uiText.text = "Score " + collected;

            c.Teleport();
        }
    }
}
------------------


using TMPro;
using UnityEngine;

class Collector : MonoBehaviour
{
    [SerializeField] TMP_Text uiText;


    int collected = 0;

    void Start()
    {
        NewMethod();
    }

    void OnTriggerEnter(Collider other)
    {
        Collectable c = other.GetComponent<Collectable>();

        if (c != null)
        {
            collected += c.GetValue();
            Debug.Log(collected);

            NewMethod();

            c.Teleport();
        }
    }

    void NewMethod()
    {
        if (uiText != null)
            uiText.text = "Score " + collected;
    }
}

------------------


HEALTH MAGUNK

2 hiba is volt benne régről

using TMPro;
using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;
    [SerializeField] TMP_Text uiText;

    public int currentHealth; // ez itt az új

    void Start()
    {
        currentHealth = maxHealth;
    }

   public bool IsAlive()
    { 
        return currentHealth > 0; 
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth <= 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz  // itt nekem 7= volt, Mimijét javítottam

        currentHealth = Mathf.Max(currentHealth - damage, 0); // ezzzel egy sorba bele tudjuk tenni if helyett // itt nem volt a - damage sem

        NewMethod2();

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        
        // Debug.Log("Aucs!");
    }



    void NewMethod2()
    {
        if (uiText != null)
            uiText.text = "Health " + currentHealth;
    }
}

--------------------
== helyett más, és nem volt -damage sem!!!!


------------

using TMPro;
using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField, Min(1)] int maxHealth = 100;
    [SerializeField] TMP_Text uiText;
    [SerializeField] Color minColor = Color.red,  maxColor = Color.blue;

    public int currentHealth; // ez itt az új

    void Start()
    {
        currentHealth = maxHealth;
    }

   public bool IsAlive()
    { 
        return currentHealth > 0; 
    }

    public void Damage(int damage)
    {
       //  currentHealth -= damage;

        if (currentHealth <= 0) return; // jvaasolt először a nem megyünk tovább, 4-5 felttel, hoigy ne is fusson, ha a feltétel jó-rossz  // itt nekem 7= volt, Mimijét javítottam

        currentHealth = Mathf.Max(currentHealth - damage, 0); // ezzzel egy sorba bele tudjuk tenni if helyett // itt nem volt a - damaga

        NewMethod2();

        if (currentHealth <= 0)
        {
    
   
            Debug.Log("Good By!");
        }
            
        
        // Debug.Log("Aucs!");
    }



    void NewMethod2()
    {
        if (uiText != null)
            return;

        uiText.text = "Health " + currentHealth;
        uiText.color = Color.Lerp(minColor, maxColor, currentHealth/maxHealth);

    }
}

-----------
CSABI BEMÁSOL

using TMPro;
using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField] TMP_Text uiText;
    [SerializeField] Color minColor = Color.red, maxColor = Color.green;
    [SerializeField] Gradient textColor;

    [SerializeField, Min(1)] int maxHealth = 100;
    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
        UpdateUI();
    }

    public bool IsAlive()
    {
        return currentHealth > 0;
    }

    public void Damage(int damage)
    {
        if (currentHealth <= 0) return;

        currentHealth = Mathf.Max(currentHealth - damage, 0);
        UpdateUI();

        if (currentHealth <= 0)
        {
            Debug.Log("Good By!");
        }
    }

    void UpdateUI()
    {
        if (uiText == null)
            return;

        uiText.text = "HP: " + currentHealth;
        uiText.color = Color.Lerp(minColor, maxColor, (float) currentHealth / maxHealth);

    }
}

---------------------------------

using TMPro;
using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField] TMP_Text uiText;
    // [SerializeField] Color minColor = Color.red, maxColor = Color.green;
    [SerializeField] Gradient textColor;

    [SerializeField, Min(1)] int maxHealth = 100;
    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
        UpdateUI();
    }

    public bool IsAlive()
    {
        return currentHealth > 0;
    }

    public void Damage(int damage)
    {
        if (currentHealth <= 0) return;

        currentHealth = Mathf.Max(currentHealth - damage, 0);
        UpdateUI();

        if (currentHealth <= 0)
        {
            Debug.Log("Good By!");
        }
    }

    void UpdateUI()
    {
        if (uiText == null)
            return;

        uiText.text = "HP: " + currentHealth;
        
        float t = (float)currentHealth / maxHealth;
        
        // uiText.color = Color.Lerp(minColor, maxColor, (float)currentHealth / maxHealth);

        uiText.color = textColor.Evaluate(t);

    }
}
---------------------------------------------------

Gradient belül lehet állítani plusz pontokat felvenni, a felső pontok az átlátszóság, és lehet presetként kezelni.

-----------------------------

GameManager létrehozásakor, ha benne vana scriopt nevében a manager akkor fogaskerékként jelöli.

EventSystem, 

-----------------


using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : MonoBehaviour
{
    [SerializeField] string sceneName;
    public void RestartGame()
    {

        SceneManager.LoadScene(sceneName);




    }


}

------------------------

Cak akkor lássunk restartot, ha meghaltunk:

using TMPro;
using UnityEngine;

class HealthObject : MonoBehaviour
{
    [SerializeField] TMP_Text uiText;
    [SerializeField] GameObject restartUI; // ez új
    // [SerializeField] Color minColor = Color.red, maxColor = Color.green;
    [SerializeField] Gradient textColor;

    [SerializeField, Min(1)] int maxHealth = 100;
    int currentHealth;

    void Start()
    {
        currentHealth = maxHealth;
        UpdateUI();
    }

    public bool IsAlive()
    {
        return currentHealth > 0;
    }

    public void Damage(int damage)
    {
        if (currentHealth <= 0) return;

        currentHealth = Mathf.Max(currentHealth - damage, 0);
        UpdateUI();

        if (currentHealth <= 0)
        {
            Debug.Log("Good By!");
        }
    }

    void UpdateUI()
    {
        if (uiText == null)
            return;

        uiText.text = "HP: " + currentHealth;
        
        float t = (float)currentHealth / maxHealth;
        
        // uiText.color = Color.Lerp(minColor, maxColor, (float)currentHealth / maxHealth);

        uiText.color = textColor.Evaluate(t);

        restartUI.SetActive(!IsAlive()); // ez új

    }
}

--------------------------
canvas-on minél lejjeb van valami, annál fentebb van a  képen
a fotón a bekötések.

kurvára baszottul nem lehet követni...

A restart button on Click-re +-al lehetett felvenni a GameManager-t, amit fent léátrehoztunk,  
utána le kellett nyitni az abalkot és a game managert, kiválasztani a restart game-t.

Aztán csináltunk egy Game Over szöveget, meg egy Panelt, és a panel child-je lett a 
Game Over és alatta a Restart button (így a képen a restart van legelöl.

Aztán bementünk a playerbe, majd a Health objectbe, ahol az UI text a Health Text, és alatta 
a Restart UI -ban a panelt állítjuk be, így lehet elérni, hogy gyakorlatilag a menü ne jelenjen meg,
amíg nem haltunk meg.

a peneltn nkikapcsolhatjhuk a képet, hogy csak síne legyen, alpha állítás és nevet is adhatunk mást.

----------------------------------
Új szöveg, bemegyek a text mesh pro-ba, és hozzártendelem, majd generate font atlas, utána tudod kezelni.
Window menü alatt (NEM TEXT, HANEM TEXT MESH PRO)
---------------------------------

MÉG HIBÁS


using UnityEngine;

public class CollectionsPractice : MonoBehaviour
{

    void OnValidate()
    {
        int[] intArray = new int[10]; // 10 elemszám
                                      //bármilyen tipusra lehetne, szöveg, de akár tömb tömbje is
                                      // index szerint hivatkozhatóak

        intArray[2] = 15;             // beír a 3. pozícióba
        int element = intArray[5];    // kiveszi a 6. pozícióból (iit mindenhol minden nulla, kivéve a kettes, ami 15)
                                      // int m2 = intArray[10];      // szar, mert nincs tizedik, hibát dob (out of range)


        for (int i = 0; i < intArray.length; i++)   // felttöltés 1..2.33-mal
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < intArray.length; i++)
        {
            Debug.Log(intArray[i]);
        }
    }


}
--------------------



using UnityEngine;

public class CollectionsPractice : MonoBehaviour
{
    [SerializeField] int[] intArraySetting;
    [SerializeField] string[] stringArraySetting;
    [SerializeField] GameObject[] GameObjectArraySetting;

    void OnValidate()
    {
        int[] intArray = new int[10]; // 10 elemszám
        string[] stringArray = { "Alma", "Körte", "Barack" };

                                      //bármilyen tipusra lehetne, szöveg, de akár tömb tömbje is
                                      // index szerint hivatkozhatóak

        intArray[2] = 15;             // beír a 3. pozícióba
        int element = intArray[5];    // kiveszi a 6. pozícióból (iit mindenhol minden nulla, kivéve a kettes, ami 15)
                                      // int m2 = intArray[10];      // szar, mert nincs tizedik, hibát dob (out of range)


        for (int i = 0; i < intArray.Length; i++)   // felttöltés 1..2.3-mal
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < GameObjectArraySetting.Length; i++) // debug kiíratás
        {
            Debug.Log(GameObjectArraySetting[i]);
        }

        char myFirstChar = '*';

        string s = "bármi";

        char[chars] = "Akármi".ToCharArray();
    }


}
----------------------


using UnityEngine;

class CollectionsPractice : MonoBehaviour
{
    [SerializeField] int[] intArraySetting;
    [SerializeField] string[] stringArraySetting;
    [SerializeField] GameObject[] gameObjectArraySetting;

    void Start()
    {

        int a = 67;

        int[] intArray = new int[10];   // 10 elemszám
        string[] stringArray = { "Alma", "Körte", "Barack" };

        intArray[2] = 15;

        int element = intArray[5];

        // int e2 = intArray[10];  // ERROR

        for (int i = 0; i < intArray.Length; i++) 
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < gameObjectArraySetting.Length; i++) 
        {
            Debug.Log(gameObjectArraySetting[i].name);
        }

        char myFirstChar = '*';

        string s = "Bármi";

        char[] chars = s.ToCharArray();

        string s2 = new string(chars);

    }
}

-----------------------------

EZ A JÓ VÉGEGES ANYAG

using UnityEngine;
using UnityEngine.UIElements;

class CollectionsPractice : MonoBehaviour
{
    [SerializeField] int[] intArraySetting;
    [SerializeField] string[] stringArraySetting;
    [SerializeField] GameObject[] gameObjectArraySetting;

    void Start()
    {

        int a = 67;

        int[] intArray = new int[10];   // 10 elemszám
        string[] stringArray = { "Alma", "Körte", "Barack" };

        intArray[2] = 15;

        int element = intArray[5];

        // int e2 = intArray[10];  // ERROR

        for (int i = 0; i < intArray.Length; i++)
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < gameObjectArraySetting.Length; i++)
        {
            Debug.Log(gameObjectArraySetting[i].name);
        }

        char myFirstChar = '*';

        string s = "Bármi";

        char[] chars = s.ToCharArray();

        string s2 = new string(chars);

        // string s3 = s.Substring(0, s.Length - 1);   // -1el levégjuk az utsó elemet
        string s3 = s.Substring(s.Length /2, s.Length /2);   // -1el levégjuk az utsó elemet
        string s4 = s.Replace("á", "a");

        string s5 = s.Replace(".", "");
        string s6 = s.ToLower();
        string s7 = s.ToUpper();
        bool contains = s.Contains("árm"); // igen, árm benne a bármi-be
        int indexOf = s.IndexOf("árm");

    }
}

------------------
Saját verzió

using System;
using System.Collections.Generic;                // ez a listáknál kell!
using UnityEngine;


class CollectionsPractice : MonoBehaviour
{
    [SerializeField] int[] intArraySetting;
    [SerializeField] string[] stringArraySetting;
    [SerializeField] GameObject[] gameObjectArraySetting;

    void Start()
    {

        int a = 67;

        int[] intArray = new int[10];   // 10 elemszám
        string[] stringArray = { "Alma", "Körte", "Barack" };

        intArray[2] = 15;

        int element = intArray[5];

        // int e2 = intArray[10];  // ERROR

        for (int i = 0; i < intArray.Length; i++)
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < gameObjectArraySetting.Length; i++)
        {
            Debug.Log(gameObjectArraySetting[i].name);
        }

        char myFirstChar = '*';

        string s = "Bármi";

        char[] chars = s.ToCharArray();

        string s2 = new string(chars);

        // string s3 = s.Substring(0, s.Length - 1);   // -1el levégjuk az utsó elemet
        string s3 = s.Substring(s.Length /2, s.Length /2);   // -1el levégjuk az utsó elemet
        string s4 = s.Replace("á", "a");

        string s5 = s.Replace(".", "");
        string s6 = s.ToLower();
        string s7 = s.ToUpper();
        bool contains = s.Contains("árm"); // igen, árm benne a bármi-be
        int indexOf = s.IndexOf("árm");


        //-------------------------------------------------------------------------------------------

        List<int> ints = new List<int>(); // nem adtam meg neki semmitü, res, nulla elemű a lista

        for (int i = 0; i < 10; i++)
        {
            ints.Add(i * i);
        }

        Debug.Log(ints.Count);

        for (int i = 0; i < ints.Count; i++) 
        {
            Debug.Log(ints[i]);
        }

        List<string> strings = new List<string>("Alma", "Körte", "Banán");

        bool succes = strings.Remove("Körtét"); // false
        strings.RemoveAt(2);                                //2es indexen töröl

        strings.Sort();
        strings.insert(1, "aaaaaa");


        string sss = strings[2];
        strings.RemoveAt(2);
        strings.Insert(2, sss);

        strings.Clear();
    }
}


----------------

TANÁRI VERZIÓ

using System.Collections.Generic;
using UnityEngine;

class CollectionsPractice : MonoBehaviour
{
    [SerializeField] int[] intArraySetting;
    [SerializeField] string[] stringArraySetting;
    [SerializeField] GameObject[] gameObjectArraySetting;

    [SerializeField] List<string> stringList;

    [SerializeField] int[][] arrayOfArraies;   // NEM MŰKÖDIK
    [SerializeField] int[,] matrix;            // NEM MŰKÖDIK

    void Start()
    {

        int a = 67;

        int[] intArray = new int[10];   // 10 elemszám
        string[] stringArray = { "Alma", "Körte", "Barack" };

        intArray[2] = 15;

        int element = intArray[5];

        // int e2 = intArray[10];  // ERROR

        for (int i = 0; i < intArray.Length; i++) 
        {
            intArray[i] = i + 1;
        }

        for (int i = 0; i < gameObjectArraySetting.Length; i++) 
        {
            Debug.Log(gameObjectArraySetting[i].name);
        }

        char myFirstChar = '*';
        string s = "Bármi";
        char[] chars = s.ToCharArray();
        string s2 = new string(chars);

        string s3 = s.Substring(s.Length / 2, s.Length / 2);
        string s4 = s.Replace("á", "a");

        string s5 = s.Replace(".", "");

        string s6 = s.ToLower();
        string s7 = s.ToUpper();
        bool contains = s.Contains("árm");  // true
        int indexOf = s.IndexOf("árm");     // 1

        // -------------------------------------------------------

        List<int> ints = new List<int>();

        for (int i = 0; i < 10; i++)
        {
            ints.Add(i * i);
        }

        Debug.Log(ints.Count);

        for (int i = 0; i < ints.Count; i++)
        {
            Debug.Log(ints[i]);
        }

        List<string> strings = new List<string> { "Alma", "Körte", "Banán" };

        bool succes = strings.Remove("Körtét");  // false
        strings.RemoveAt(2);                     // 2-es indexen töröl

        strings.Sort();
        strings.Insert(1, "1111235436");

        string sss = strings[2];
        strings.RemoveAt(2);
        strings.Insert(2, sss);

        strings.Clear();


    }
}

-----------------------------------


